---
title: "Untitled"
format: 
  html: 
  toc: true
  toc-location: left
  code-fold: true
  theme: yeti
execute: 
  message: false
  warning: false
---

```{r}
library(tidyverse)
library(here)
library(janitor)
library(ggeffects)
library(performance)
library(naniar) # or equivalent
library(flextable) # or equivalent
library(car)
library(broom)
# would be nice to have
library(corrplot)
library(AICcmodavg)
library(GGally)
```

Read in data:

```{r, reading-data}
plant <- read_csv(here("data", "knb-lter-hfr.109.18", "hf109-01-sarracenia.csv")) %>% 
  #to make colunm names cleaner
  clean_names() %>% 
  #selecting the list of columns to use/keep
  select(totmass, species, feedlevel, sla, chlorophyll, amass, num_lvs, num_phylls)

```

Visualize the missing data:
```{r, missing-data-visualization}
gg_miss_var(plant)

```

Subsetting the data by dropping NAs:

```{r, subset-drop-NA}
plant_subset <- plant %>% 
  drop_na(sla, chlorophyll, amass, num_lvs, num_phylls)
```

Create a correlation plot:

(example writing) To determine the relationship between numerical variables in our dataset, we calculated Pearon's r and visually represented correlation using a correlation plot.

```{r, correlation-plot}
#calculate pearson's r for numerical predictors, not response variables and not categorical variables
plant_cor <-plant_subset %>% 
  select(feedlevel:num_phylls) %>% 
  cor(method = "pearson")
#creating a correlation plot
corrplot(plant_cor,
         #change shape of what's in the cells
         method = "ellipse",
        #adds correlation coefficients, r
          addCoef.col = "black"
         )
#size of circles represent strength of correlation and color indicates the direction of the correlation between the two variables, or in the case of ellipse which was they point is the direction  

```

Create a plot of each variable compared against the others, not calculating anything

```{r, pairs-plot}
plant_subset %>% 
  #can now include categorical variables, putting the varibales on x and y axis
  select(species:num_phylls) %>% 
  ggpairs()

```

Starting regression here:

(example) To determine how species and physiological characteristics predict biomass, we fit multiple linear models. 

```{r, null-and-full-model}
null <- lm(totmass ~ 1, data = plant_subset)
full <- lm(totmass ~ species + feedlevel + sla + chlorophyll + amass + num_lvs + num_phylls, data = plant_subset)
```

We visually assessed normality and homoscedacisity using diagnostic plots for the full model:

```{r, full-doagnostic}
par(mfrow = c(2,2))
plot(full)
#based on how clumped the residuals are int he beginning it is border line for homoscedasticity, moreso heterscedastic
```

We also tested for normality and homoskedasticity using the Shapiro-Wilk Test (null hypothesis is that the residuals are null hypothesis):

We tested for heterscedasticity using the Breusch-Pagan test (null hypothesis: the variable of interest has constant variance). (this is the performance package)

```{r}
check_normality(full)
#not normal and heteroscedasticity
check_heteroscedasticity(full)
```

The assumptions are not met for multiple linear regression. We can mathematically transform the response variable to increase residual normaility.

```{r}
full_log <- lm(log(totmass) ~  species + feedlevel + sla + chlorophyll + amass + num_lvs + num_phylls, data = plant_subset)

full_log
plot(full_log)
check_normality(full_log)
check_heteroscedasticity(full_log)
```

